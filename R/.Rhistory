X = matrix(rnorm(100), nrow=10)
X
X = matrix(rnorm(100), ncol=5)
X
x = matrix(rnorm(100), ncol=5)
X_orig = x
X = as.matrix(cbind(1,scale(x))) # standardising the covariates and adding an intercept
aux.X = apply(X, 2, unique) # Checking how many unique values each variable has
unique.values.X = unlist(lapply(aux.X, length))
X[, which(unique.values.X==2)] = as.matrix(X_orig[, which(unique.values.X==2)-1]) # Keeping the binary variables as they originally are
aux.X
unique.values.X = unlist(lapply(aux.X, length))
X[, which(unique.values.X==2)] = as.matrix(X_orig[, which(unique.values.X==2)-1]) # Keeping the binary variables as they originally are
# Quantities needed for prediction
center = apply(X_orig, 2, mean)
center
scale = apply(X_orig, 2, sd)
scale
center[which(unique.values.X==2)-1] = 0
scale[which(unique.values.X==2)-1] = 1
unique.values.X
which(unique.values.X==2)
which(unique.values.X==2)
which(unique.values.X==2)-1
center[which(unique.values.X==2)-1] = 0
center
# Quantities needed for prediction
center = apply(X_orig, 2, mean)
center
which(unique.values.X==2)
which(unique.values.X==2)-1
center[which(unique.values.X==2)-1]
scale
scale[which(unique.values.X==2)-1] = 1
scale
scale
which(scale > 0)
var_names = names(X_orig)
var_names
X_orig
names(X_orig)
var_names = names(X_orig)
X_splines
X_splines = list()
X_splines
X_splines[[1]] = matrix(rep(1, nrow(X)), ncol=1)
X_splines
df = 1
dg = 1
aux_scale
aux_scale = which(scale > 0) # Removing columns where all values are equal
var_names = names(X_orig)
X_splines = list()
X_splines[[1]] = matrix(rep(1, nrow(X)), ncol=1)
df = 1
dg = 1
aux_scale
aux_scale
i=1
try(bs(X_orig[,i], df = df, degree=dg))
library(splines)
bs(X_orig[,i], df = df, degree=dg)
try(bs(X_orig[,i], df = df, degree=dg))
check_error = try(bs(X_orig[,i], df = df, degree=dg))
'try-error' %in% class(check_error)
class(check_error)
try(bs(c(1,1,1,1,1,1)))
try(bs(c(1,1,1,1,1,1)),df=1,dg=1)
try(bs(c(1,1,1,1,1,1)),df=1,degree=1)
try(bs(c(1,1,1,1,1,1),df=1,degree=1))
try(bs(c(1,1,1,1,1,0),df=1,degree=1))
try(bs(c(1,1,1,0,1,0),df=1,degree=1))
bs(c(1,1,1,0,1,0),df=1,degree=1)
bs(rbinom(20,1,0.5),df=1,degree=1)
bs(rbinom(20,1,0.5))
bs(rbinom(20,1,0.01))
bs(rbinom(20,1,0.01), df = 1)
bs(rbinom(20,1,0.01), df = 1, degree=3)
x = c(rep(0,10), rep(1,20), rep(2,20))
ns(x, df=3)
x = matrix(rnorm(100), ncol=5)
aa = c(rep(0,10), rep(1,20), rep(2,20))
ns(aa, df=3)
bb = try(ns(aa, df=3))
class(bb)
'try-error' %in% class(bb)
i=1
check_error = try(bs(X_orig[,i], df = df, degree=dg))
check_error
('try-error' %in% class(check_error))
X_splines[[i+1]] = matrix(bs(X_orig[,i], df = 1, degree = 1), ncol = 1) # 1 knot!
names(X_splines)[i+1] = var_names[i]
names(X_splines)
var_names[i]
X_orig[,i]
X_orig
center
scale
check_error = try(bs(X_orig[,h], df = df, degree=dg))
i=NULL
# Create the splines ----------------------------------------------------------------------
if (str == 'splines'){
tryCatch({
for (h in aux_scale){
check_error = try(bs(X_orig[,h], df = df, degree=dg))
if ('try-error' %in% class(check_error)){
X_splines[[h+1]] = matrix(bs(X_orig[,h], df = 1, degree = 1), ncol = 1) # 1 knot!
names(X_splines)[h+1] = var_names[h]
} else {
X_splines[[h+1]] = matrix(bs(X_orig[,h], df = df, degree = dg), ncol = df) # df knots!
names(X_splines)[h+1] = var_names[h]
}
}},error = function(e) e)
}
str
tryCatch({
for (h in aux_scale){
check_error = try(bs(X_orig[,h], df = df, degree=dg))
if ('try-error' %in% class(check_error)){
X_splines[[h+1]] = matrix(bs(X_orig[,h], df = 1, degree = 1), ncol = 1) # 1 knot!
names(X_splines)[h+1] = var_names[h]
} else {
X_splines[[h+1]] = matrix(bs(X_orig[,h], df = df, degree = dg), ncol = df) # df knots!
names(X_splines)[h+1] = var_names[h]
}
}},error = function(e) e)
X_splines
# Keep the (standardised) original covariates ------------------------------------------------------------
if (str == 'original'){
for (h in aux_scale){
X_splines[[h+1]] = X[,(h+1)]
}
}
for (h in aux_scale){
X_splines[[h+1]] = X[,(h+1)]
}
X_splines
X_splines[[2]]
dim(X_splines[[2]])
length(X_splines[[2]])
dim(t(X_splines[[2]]))
X[,(h+1)]
h
X
class(X)
X[,2]
as.matrix(X[,(h+1)])
X[,1]
X[,2]
X[,2]%*%3
X[,2]%*%c(3)
as.matrix(X[,2])%*%c(3)
as.matrix(X[,2])%*%c(3)
as.matrix(X[,2])%*%c(3)
matrix(poly(X_orig[,h], degree=2, raw=TRUE), nrow=nrow(X_orig))
X_orig[,h]
X_orig[,h]
as.matrix(X_orig[,h])
cc = try(matrix(rnorm(100)), ncol=7)
class(cc)
cc = try(matrix(rnorm(100), ncol=7))
class(cc)
cc
xsplines
xsplines = X_splines
xsplines
xsplines[6]
lm_vars = c(1,6)
xsplines[lm_vars]
unlist(xsplines[lm_vars])
xsplines[lm_vars]
matrix(unlist(xsplines[lm_vars]), nrow=20)
matrix(unlist(xsplines[lm_vars]), nrow=20)
matrix(unlist(xsplines[lm_vars]), nrow=20)[c(3,6,10,15),]
unlist(xsplines[lm_vars])
